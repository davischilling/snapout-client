{"version":3,"sources":["../../node_modules/style-inject/dist/style-inject.es.js","../../src/index.tsx","sections/VideoGrid.tsx"],"names":["css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","ReactYouTubeLite","adNetwork","url","playlist","poster","title","noCookie","activatedClass","iframeClass","playerClass","wrapperClass","aspectRatio","React","preconnected","setPreconnected","iframe","setIframe","videoId","encodeURIComponent","match","getYoutubeId","videoTitle","posterUrl","ytUrl","iframeSrc","rel","href","as","onPointerOver","onClick","className","backgroundImage","width","height","frameBorder","allow","allowFullScreen","src","VideoGridSection","data","useContext","AppContext","useState","undefined","sectionTitle","setSectionTitle","useEffect","sections","length","find","section","entityName","Object","keys","medias","id","display","justifyContent","color","pageTitle","map","youtubeUrlId","marginBottom","paddingBottom"],"mappings":"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","file":"static/js/9.51c7dbbc.chunk.js","sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","// Dependencies\nimport * as React from 'react';\n\n// Styles\nimport './styles/styles.css';\n\nexport interface Props {\n  /**\n   * If `https://static.doubleclick.net` is enabled or not\n   *\n   * @default true\n   */\n  adNetwork?: boolean;\n  /**\n   * The URL of the video in any format like youtube.com or youtu.be\n   * we take care of get the ID of the video\n   */\n  url: string;\n  /**\n   * If the video URL contains a playlist or not\n   *\n   * @default false\n   */\n  playlist?: boolean;\n  /**\n   * The different quality to show the poster\n   * see: https://developers.google.com/youtube/v3/docs/thumbnails\n   * for more information\n   *\n   * @default \"hqdefault\"\n   */\n  poster?:\n    | 'maxresdefault'\n    | '0'\n    | '1'\n    | '2'\n    | '3'\n    | 'default'\n    | 'hqdefault'\n    | 'mqdefault'\n    | 'sddefault';\n  /**\n   * The `data-title` to insert in the `iframe`\n   *\n   * @default \"React YouTube Lite\"\n   */\n  title?: string;\n  /**\n   * If you use GDPR and don't want YouTube cookies enable this option\n   *\n   * @default false\n   */\n  noCookie?: boolean;\n  /**\n   * The class used to hide the elements when the iframe is already renderer\n   *\n   * @default \"lty-playbt\"\n   */\n  activatedClass?: string;\n  /**\n   * Default classes to put iframe responsive\n   *\n   * @default \"embed-reponsive-item\"\n   */\n  iframeClass?: string;\n  /**\n   * Class for youtube play button\n   *\n   * @default \"lty-playbtn\"\n   */\n  playerClass?: string;\n  /**\n   * Default classes to put container responsive\n   *\n   * @default \"ryt-lite embed-responsive\"\n   */\n  wrapperClass?: string;\n  /**\n   * Implements a `padding-bottom` to generate the size of the iframe\n   *\n   * - `aspect-ratio-none`: 0\n   * - `aspect-ratio-square`: 100%\n   * - `aspect-ratio-16/9`: 56.25%\n   * - `aspect-ratio-4/3`: 75%\n   * - `aspect-ratio-21/9`: 42.86%\n   *\n   * @default \"aspect-ratio-16/9\"\n   */\n  aspectRatio?:\n    | 'aspect-ratio-none'\n    | 'aspect-ratio-square'\n    | 'aspect-ratio-16/9'\n    | 'aspect-ratio-4/3'\n    | 'aspect-ratio-21/9';\n}\n\n/**\n * Returns the ID of the youtube video url provided\n *\n * @param url - The URL of the video (we take care of )\n */\nexport function getYoutubeId(url: string): string {\n  const regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\n  const match = url.match(regExp);\n\n  return match && match[7].length == 11 ? match[7] : '';\n}\n\n/**\n * Render faster YouTube videos to get a high score page render\n */\nexport const ReactYouTubeLite = ({\n  adNetwork = true,\n  url = '',\n  playlist = false,\n  poster = 'hqdefault',\n  title = 'React YouTube Lite',\n  noCookie = false,\n  activatedClass = 'lyt-activated',\n  iframeClass = 'embed-responsive-item',\n  playerClass = 'lty-playbtn',\n  wrapperClass = 'ryt-lite embed-responsive',\n  aspectRatio = 'aspect-ratio-16/9',\n}: Props): JSX.Element => {\n  const [preconnected, setPreconnected] = React.useState(false);\n  const [iframe, setIframe] = React.useState(false);\n  const videoId = encodeURIComponent(getYoutubeId(url));\n  const videoTitle = title;\n  const posterUrl = `https://i.ytimg.com/vi/${videoId}/${poster}.jpg`;\n  const ytUrl = noCookie\n    ? 'https://www.youtube-nocookie.com'\n    : 'https://www.youtube.com';\n  const iframeSrc = !playlist\n    ? `${ytUrl}/embed/${videoId}?autoplay=1`\n    : `${ytUrl}/embed/videoseries?list=${videoId}`;\n\n  /**\n   * Preload google `link` in header\n   */\n  const warmConnections = () => {\n    if (preconnected) return;\n\n    setPreconnected(true);\n  };\n\n  /**\n   * Set iframe as active if already active, return.\n   */\n  const addIframe = () => {\n    if (iframe) return;\n\n    setIframe(true);\n  };\n\n  return (\n    <>\n      <link rel=\"preload\" href={posterUrl} as=\"image\" />\n      <>\n        {preconnected && (\n          <>\n            <link rel=\"preconnect\" href={ytUrl} />\n            <link rel=\"preconnect\" href=\"https://www.google.com\" />\n            {adNetwork && (\n              <>\n                <link rel=\"preconnect\" href=\"https://static.doubleclick.net\" />\n                <link\n                  rel=\"preconnect\"\n                  href=\"https://googleads.g.doubleclick.net\"\n                />\n              </>\n            )}\n          </>\n        )}\n      </>\n      <div\n        onPointerOver={warmConnections}\n        onClick={addIframe}\n        className={`${wrapperClass} ${aspectRatio} ${\n          iframe ? activatedClass : ''\n        }`}\n        data-title={videoTitle}\n        style={{ backgroundImage: `url(${posterUrl})` }}\n      >\n        <div className={playerClass}></div>\n        {iframe && (\n          <iframe\n            className={iframeClass}\n            title={videoTitle}\n            width=\"560\"\n            height=\"315\"\n            frameBorder=\"0\"\n            allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n            allowFullScreen\n            src={iframeSrc}\n          ></iframe>\n        )}\n      </div>\n    </>\n  );\n};\n","import React, { useContext, useEffect, useState } from 'react'\r\nimport Loader from 'react-loader-spinner'\r\nimport {\r\n  PageContent, PageTitle\r\n} from '../components'\r\nimport { AppContext } from '../contexts/app-cotext'\r\nimport { MediaType } from '../interfaces'\r\n\r\nimport { ReactYouTubeLite } from 'react-youtube-lite';\r\n\r\nconst VideoGridSection = () => {\r\n\r\n    const { data } = useContext(AppContext)\r\n    const [sectionTitle, setSectionTitle] = useState<string | undefined>(undefined)\r\n\r\n    useEffect(() => {\r\n        if (data.sections.length > 0) {\r\n          data.sections.find(section => {\r\n            if (section.entityName === 'medias') {\r\n              setSectionTitle(section.sectionTitle)\r\n            }\r\n          })\r\n        }\r\n    }, [data.sections])\r\n\r\n    if (Object.keys(data.medias).length === 0) {\r\n        return <div id=\"media\">\r\n                    <br/>\r\n                    <br/>\r\n                    <br/>\r\n                    <br/>\r\n                    <PageContent>\r\n                        <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n                        <Loader\r\n                            type=\"Puff\"\r\n                            color=\"#e21f2f\"\r\n                            height={80}\r\n                            width={80}\r\n                        />\r\n                        </div>\r\n                    </PageContent>\r\n                </div>\r\n    }\r\n\r\n    return (\r\n        <div id=\"media\">\r\n            <br/>\r\n            <br/>\r\n            <PageTitle title={sectionTitle ? sectionTitle : ''} style={\"01\"} pageTitle={\"01\"} />\r\n            <PageContent>\r\n            {\r\n                data.medias?.map(({\r\n                    id,\r\n                    youtubeUrlId,\r\n                    videoTitle\r\n                }: MediaType) => (\r\n                    <div className=\"col-md-6 col-xs-12 mb-0\" key={id} style={{\r\n                        marginBottom: 20, paddingBottom: 30\r\n                    }}>\r\n                        <div className=\"video-item\">\r\n                            <div className=\"video-media\">\r\n                                <div className=\"yt-lite\">\r\n                                    <ReactYouTubeLite\r\n                                        url={`https://www.youtube.com/embed/${youtubeUrlId}`}\r\n                                        title={videoTitle}\r\n                                    />\r\n                                </div>\r\n\r\n                            </div>\r\n                            <h2>{videoTitle}</h2>\r\n                        </div>\r\n                    </div>\r\n                ))\r\n            }\r\n            </PageContent>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VideoGridSection"],"sourceRoot":""}